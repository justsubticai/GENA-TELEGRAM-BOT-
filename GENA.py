import re
import subprocess
import platform
# import telegram (–ß–ò–°–¢–û –î–õ–Ø –§–£–ù–ö–¶–ò–ò –° ID-–ö–ê–†–¢–ò–ù–û–ö)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CallbackQueryHandler, CommandHandler
from telegram.constants import ParseMode 

#–û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –†–ê–ë–û–¢–´ –ë–û–¢–ê
SUPPORT_CHAT_ID = -100 #–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–õ–Ø –†–ê–ë–û–¢–´ –ë–û–¢–ê!
TELEGRAM_TOKEN = "" #–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–õ–Ø –†–ê–ë–û–¢–´ –ë–û–¢–ê!

TARGET_SERVERS = {
    "TranSibVPN-–ì–µ—Ä–º–∞–Ω–∏—è-02": "", #–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê!
    "TranSibVPN-–§–∏–Ω–ª—è–Ω–¥–∏—è-02": "", #–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê!       
    "TranSibVPN-–õ–∞—Ç–≤–∏—è-01": "", #–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê!
    "TranSibVPN-–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã-01": "" #–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê!         
}

CB_MENU = 'menu_main'
CB_KNOWLEDGE = 'menu_baza'
CB_STATUS = 'menu_status'
CB_SUBMIT = 'menu_request' 

USER_STATE = {} 
USER_CATEGORY = {} 

PHOTO_ID_KEY = 'main_photo_id'
START_PHOTO_ID = '' #ID –õ–Æ–ë–û–ô –§–û–¢–û–ì–†–ê–§–ò–ò!

CATEGORIES = {
    "PAYMENT": "üí∞ –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π", 
    "TECH": "üíª –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º", 
    "GENERAL": "‚ùì –î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞" 
}

#–ö–û–î –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê –°–ï–†–í–ï–†–û–í
def ping_server(address: str) -> str:

    system = platform.system().lower()
    
    if system == 'windows':
        param = '-n'
        timeout_param = '-w'
        timeout_val = '4000' 
        command = ['ping', param, '1', timeout_param, timeout_val, address]
    else:
        param = '-c'
        timeout_param = '-W'
        timeout_val = '4'
        command = ['ping', param, '1', timeout_param, timeout_val, address]
        
    try:
        result = subprocess.run(
            command, 
            capture_output=True, 
            text=True, 
            timeout=5 
        )
        
        if result.returncode == 0:
            if system == 'windows':
                match = re.search(r'Average = (\d+)ms', result.stdout)
                if match:
                    return f"‚úÖ OK (–ó–∞–¥–µ—Ä–∂–∫–∞: {match.group(1)} –º—Å)"
            else:
                match = re.search(r'min/avg/max/mdev = [\d\.]+/([\d\.]+)', result.stdout)
                if match:
                    return f"‚úÖ OK (–ó–∞–¥–µ—Ä–∂–∫–∞: {round(float(match.group(1)))} –º—Å)"

            return "‚úÖ OK (–ó–∞–¥–µ—Ä–∂–∫–∞: <500 –º—Å)"
            
        else:
            return "‚ùå –¢–ê–ô–ú–ê–£–¢ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    except subprocess.TimeoutExpired:
        return "‚ùå –¢–ê–ô–ú–ê–£–¢ (–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç 5 —Å)"
    except Exception as e:
        return f"‚ö†Ô∏è –û–®–ò–ë–ö–ê –ø—Ä–æ–≤–µ—Ä–∫–∏ ({escape_markdown_v2(str(e))})"

#–≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –ú–ê–ö–†–ö–î–ê–£–ù–ê
def escape_markdown_v2(text: str) -> str:
    special_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(special_chars)}])', r'\\\1', text)

#–ú–ï–ù–Æ –í –ì–õ–ê–í–ù–û–ú –ú–ï–ù–Æ
def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ", callback_data=CB_SUBMIT)],
        [InlineKeyboardButton("üìö –ë–ê–ó–ê-–ó–ù–ê–ù–ò–ô", callback_data=CB_KNOWLEDGE)],
        [InlineKeyboardButton("‚ö°Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=CB_STATUS)],
    ]
    return InlineKeyboardMarkup(keyboard)

#–ö–ù–û–ü–ö–ê –î–õ–Ø –í–û–ó–í–†–ê–¢–ê –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
def get_return_to_main_button() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CB_MENU)]
    ])

#–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message_id=None) -> None:
    user_id = update.effective_user.id
    
    USER_STATE.pop(user_id, None)
    USER_CATEGORY.pop(user_id, None)

    caption = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–æ—ë –∏–º—è –ì–µ–Ω–∞ - —è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—à–Ω–∏–∫ —Å–µ—Ä–≤–∏—Å–∞ TranSib. \n\n–ú–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ—á—å –≤–∞–º –≤ –≤–∞—à–∏—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç—è—Ö, –ª–∏–±–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤–∞—Å –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Å–∞–º—ã–º –±—ã—Å—Ç—Ä—ã–º —Å–ø–æ—Å–æ–±–æ–º. \n\n–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
    
    bot = context.bot
    chat_id = update.effective_chat.id
    
    if message_id:
        photo_id = context.user_data.get(PHOTO_ID_KEY, START_PHOTO_ID)
        
        await bot.edit_message_media(
            chat_id=chat_id,
            message_id=message_id,
            media=InputMediaPhoto(
                media=photo_id,
                caption=caption,
                parse_mode=None
            ),
            reply_markup=get_main_menu_keyboard() 
        )
    else:

        sent_message = await bot.send_photo(
            chat_id=chat_id,
            photo=START_PHOTO_ID,
            caption=caption,
            reply_markup=get_main_menu_keyboard()
        )
        context.user_data[PHOTO_ID_KEY] = sent_message.photo[-1].file_id

#–ó–ê–ì–õ–£–®–ö–ê –ü–†–ò –í–í–û–î–ï –ö–û–ú–ê–ù–î–´ START (–ö–û–°–¢–´–õ–¨)
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text(
            text="–ó–∞–≥—Ä—É–∑–∫–∞...", 
            reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True),
            disable_notification=True
        )
        try:
            await context.bot.delete_message(
                chat_id=update.message.chat_id, 
                message_id=update.message.message_id + 1
            )
        except Exception:
            pass 
    await show_main_menu(update, context)

#–ë–ê–ó–ê-–ó–ù–ê–ù–ò–ô –ò –ó–ê–Ø–í–ö–ò
async def handle_callback_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    data = query.data
    chat_id = query.message.chat_id
    message_id = query.message.message_id
    bot = context.bot
    photo_id = context.user_data.get(PHOTO_ID_KEY, START_PHOTO_ID)
    
    if data == CB_MENU:
        await show_main_menu(update, context, message_id=message_id)
        return
        
    elif data == CB_KNOWLEDGE:
        
        caption_text = (
            "üìñ **–ë–ê–ó–ê\\-–ó–ù–ê–ù–ò–ô**\n\n"
            "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\\." 
        )
        
        knowledge_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –ë–ê–ó–£-–ó–ù–ê–ù–ò–ô", url="https://transibvpn-baza-znanii.gitbook.io/book/")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CB_MENU)]
        ])
        
        await bot.edit_message_media(
            chat_id=chat_id, 
            message_id=message_id,
            media=InputMediaPhoto(
                media=photo_id,
                caption=caption_text,
                parse_mode=ParseMode.MARKDOWN_V2
            ),
            reply_markup=knowledge_keyboard 
        )
        
    elif data == CB_STATUS:
        
        await bot.edit_message_media(
            chat_id=chat_id,
            message_id=message_id,
            media=InputMediaPhoto(
                media=photo_id,
                caption=escape_markdown_v2("üñ• –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."),
                parse_mode=ParseMode.MARKDOWN_V2
            ),
            reply_markup=get_return_to_main_button()
        )

        status_results = []
        for name, address in TARGET_SERVERS.items():
            result = ping_server(address)
            status_results.append(f"‚Ä¢ *{escape_markdown_v2(name)}*: {escape_markdown_v2(result)}")
        
        status_message = "üñ• **–†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê**\n\n"
        status_message += "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: " + escape_markdown_v2(", ".join(TARGET_SERVERS.keys())) + "\n\n"
        status_message += "\n".join(status_results)
        
        await bot.edit_message_media(
            chat_id=chat_id, 
            message_id=message_id,
            media=InputMediaPhoto(
                media=photo_id,
                caption=status_message,
                parse_mode=ParseMode.MARKDOWN_V2
            ),
            reply_markup=get_return_to_main_button()
        )

    elif data == CB_SUBMIT:
        user_id = query.from_user.id
        USER_STATE[user_id] = 'AWAITING_CATEGORY'
        
        keyboard = [
            [InlineKeyboardButton(text, callback_data=key)] 
            for key, text in CATEGORIES.items()
        ]
        keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CB_MENU)])
        
        await bot.edit_message_media(
            chat_id=chat_id,
            message_id=message_id,
            media=InputMediaPhoto(
                media=photo_id,
                caption="üìù **–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã:",
                parse_mode=ParseMode.MARKDOWN
            ),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    if data in CATEGORIES.keys():
        await handle_category_selection(update, context)


async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    category_key = query.data
    photo_id = context.user_data.get(PHOTO_ID_KEY, START_PHOTO_ID)
    
    if USER_STATE.get(user_id) != 'AWAITING_CATEGORY':
        await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'.")
        return
    
    selected_category_text = CATEGORIES.get(category_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    USER_CATEGORY[user_id] = selected_category_text
    

    await query.message.edit_media(
        media=InputMediaPhoto(
            media=photo_id,
            caption=f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: **{selected_category_text}**.",
            parse_mode=ParseMode.MARKDOWN
        ),
        reply_markup=None 
    )
    
    instruction_text = (
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º."
    )
    back_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=CB_SUBMIT)]
    ])
    
    await context.bot.send_message(
        chat_id=user_id,
        text=instruction_text,
        reply_markup=back_keyboard 
    )
    
    USER_STATE[user_id] = 'AWAITING_PROBLEM'
    await query.answer() 


async def submit_problem_to_support(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    
    user = update.effective_user
    user_id = user.id
    
    if USER_STATE.get(user_id) != 'AWAITING_PROBLEM':
        if update.message and update.message.text and update.message.text != '/start':
             await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
        return    
    category = USER_CATEGORY.get(user_id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    
    user_mention = f"@{user.username}" if user.username else "–Ω–µ—Ç username"
    header = f"üö® **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê** üö®\n\n"
    header += f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** `{category}`\n"
    header += f"**–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** `{user_mention}` \\(ID: `{user.id}`\\)\n\n" 
    
    try:
        if update.message.reply_to_message and \
           update.message.reply_to_message.reply_markup and \
           update.message.reply_to_message.reply_markup.inline_keyboard and \
           update.message.reply_to_message.reply_markup.inline_keyboard[0][0].callback_data == CB_SUBMIT:
            try:
                await update.message.reply_to_message.delete()
            except Exception:
                pass 
                
        if update.message.text:
            problem_text_safe = escape_markdown_v2(update.message.text)
            full_text = header + f"**–¢–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã:**\n{problem_text_safe}"
            
            await context.bot.send_message(
                chat_id=SUPPORT_CHAT_ID,
                text=full_text,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            
        elif update.message.photo or update.message.video or update.message.document:
            caption_text = header + f"**–û–ø–∏—Å–∞–Ω–∏–µ:**\n{escape_markdown_v2(update.message.caption or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"

            await update.message.copy(
                chat_id=SUPPORT_CHAT_ID,
                caption=caption_text,
                parse_mode=ParseMode.MARKDOWN_V2
            )

        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏.")


        await update.message.reply_text("üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞!")
        await show_main_menu(update, context) 
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
        
    USER_STATE.pop(user_id, None)
    USER_CATEGORY.pop(user_id, None)


#–ö–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø ID –ö–ê–†–¢–ò–ù–û–ö 
# async def handle_photo(update, context):

#      photo_info = update.message.photo
    
#      print("--- –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è ---")
#      print(photo_info)
#      print("---------------------------")
    
#      if photo_info:
#          file_id = photo_info[-1].file_id
#          await update.message.reply_text(
#              f"–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Ñ–æ—Ç–æ. –ï–≥–æ File ID (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è): \n`{file_id}`",
#              parse_mode=telegram.constants.ParseMode.MARKDOWN
#          )

#–ö–û–î –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê –ò –§–£–ù–ö–¶–ò–ô
def main() -> None:
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(CallbackQueryHandler(handle_callback_menu))
    # application.add_handler(MessageHandler(filters.PHOTO, handle_photo)) –î–õ–Ø ID –ö–ê–†–¢–ò–ù–û–ö
    application.add_handler(MessageHandler(
        filters.ALL & ~filters.COMMAND, 
        submit_problem_to_support
    ))
    
    print("–ù—É —á—ë –¥–∞–≤–∞–π, –ø—Ä–æ–≤–µ—Ä—è–π...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()